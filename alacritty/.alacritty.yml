env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000
bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
window:
  opacity: 1.0

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  hints:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    launcher: open

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: Control|Shift

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to both the primary and
  # the selection clipboard. Otherwise, it will only be copied to the selection
  # clipboard.
  save_to_clipboard: true

window:
  dynamic_title: true

# Style of the cursor
#
# Values for 'cursor_style':
# - Block
# - Underline
# - Beam
cursor_style: Beam

## Base16 Gruvbox dark, hard 256 - alacritty color config
## Dawid Kurek (dawikur@gmail.com), morhetz (https://github.com/morhetz/gruvbox)
font:
  normal:
    family: MesloLGS NF
    style: Regular

  bold:
    family: MesloLGS NF
    style: Bold

  italic:
    family: MesloLGS NF
    style: Italic

colors:
  # Default colors
  primary:
    background: '0x1d2021'
    foreground: '0xd5c4a1'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '0x1d2021'
    cursor: '0xd5c4a1'

  # Normal colors
  normal:
    black:   '0x1d2021'
    red:     '0xfb4934'
    green:   '0xb8bb26'
    yellow:  '0xfabd2f'
    blue:    '0x83a598'
    magenta: '0xd3869b'
    cyan:    '0x8ec07c'
    white:   '0xd5c4a1'

  # Bright colors
  bright:
    black:   '0x665c54'
    red:     '0xfb4934'
    green:   '0xb8bb26'
    yellow:  '0xfabd2f'
    blue:    '0x83a598'
    magenta: '0xd3869b'
    cyan:    '0x8ec07c'
    white:   '0xfbf1c7'

  indexed_colors:
    - { index: 16, color: '0xfe8019' }
    - { index: 17, color: '0xd65d0e' }
    - { index: 18, color: '0x3c3836' }
    - { index: 19, color: '0x504945' }
    - { index: 20, color: '0xbdae93' }
    - { index: 21, color: '0xebdbb2' }

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/zsh.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
#shell:
#  program: /usr/local/bin/zsh
#  args:
#    - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  - { key: LBracket,    mods: Alt,       chars: "["                           }
  - { key: RBracket,    mods: Alt,       chars: "]"                           }
  - { key: LBracket,    mods: Alt|Shift, chars: "\x7B"                        }
  - { key: RBracket,    mods: Alt|Shift, chars: "\x7D"                        }
  - { key: N,           mods: Command,   action: SpawnNewInstance             }
  - { key: Space,       mods: Alt,       chars: " "                           }
  - { key: V,           mods: Command,   action: Paste                        }
  - { key: C,           mods: Command,   action: Copy                         }
  - { key: Q,           mods: Command,   action: Quit                         }
  - { key: Key8,        mods: Alt|Shift, chars: "\x7B"                        }
  - { key: Key9,        mods: Alt|Shift, chars: "\x7D"                        }
  - { key: Key8,        mods: Alt,       chars: "\x5B"                        }
  - { key: Key9,        mods: Alt,       chars: "\x5D"                        }
  - { key: Key2,        mods: Alt,       chars: "\x40"                        }
  - { key: Key6,        mods: Control,   chars: "\x1e"                        }
  - { key: Home,                         chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                         chars: "\x1b[H",   mode: ~AppCursor  }
  - { key: End,                          chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                          chars: "\x1b[F",   mode: ~AppCursor  }
